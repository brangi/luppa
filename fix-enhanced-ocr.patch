--- enhanced_ocr.rs.orig
+++ enhanced_ocr.rs
@@ -1620,167 +1620,8 @@
             } else if authority.is_none() && 
-        }
-    }
-    
-    // Gender extraction
-    if gender.is_empty() {
-        if let Some(value) = Self::extract_gender_from_text(line) {
-            gender = value;
-            continue;
-        }
-    }
-    
-    // Place of birth extraction
-    if place_of_birth.is_none() {
-        if let Some(value) = Self::extract_place_of_birth_from_text(line) {
-            place_of_birth = Some(value);
-            continue;
-        }
-    }
-    
-    // Nationality extraction
-    if nationality.is_empty() {
-        if let Some(value) = Self::extract_nationality_from_text(line) {
-            nationality = value;
-            continue;
-        }
-    }
-    
-    // Authority extraction
-    if authority.is_none() {
-        if let Some(value) = Self::extract_authority_from_text(line) {
-            authority = Some(value);
-            continue;
-        }
-    }
-}
-
-// Combine surname and given names for the full name field if needed
-let mut name = String::new();
-if !surname.is_empty() || !given_names.is_empty() {
-    name = format!("{} {}", surname.trim(), given_names.trim()).trim().to_string();
-}
-
-// If we have an issue date but no expiry date, estimate expiry as 10 years later
-if !date_of_issue.is_empty() && date_of_expiry.is_empty() {
-    // Simple estimation - not accurate for all countries but better than nothing
-    if let Some(pos) = date_of_issue.rfind('/') {
-        if let Ok(year) = date_of_issue[pos+1..].parse::<i32>() {
-            let expiry_year = year + 10;
-            date_of_expiry = format!("{}{}", &date_of_issue[..pos+1], expiry_year);
-        }
-    }
-}
-
-// Final fallback extraction for problematic fields if still missing
-if place_of_birth.is_none() {
-    // Direct fallback for place of birth based on commonly known countries
-    // This uses statistical likelihood when we have nationality information
-    let nat_upper = nationality.to_uppercase();
-    if nat_upper.contains("USA") || nat_upper.contains("UNITED STATES") {
-        place_of_birth = Some("UNITED STATES".to_string());
-    } else if nat_upper.contains("UK") || nat_upper.contains("UNITED KINGDOM") || nat_upper.contains("BRITISH") {
-        place_of_birth = Some("UNITED KINGDOM".to_string());
-    } else if nat_upper.contains("MEX") || nat_upper.contains("MEXICO") {
-        place_of_birth = Some("MEXICO".to_string());
-    } else if nat_upper.contains("CAN") || nat_upper.contains("CANADA") {
-        place_of_birth = Some("CANADA".to_string());
-    }
-    // Add more common countries as needed
-    
-    // If still not found, look for specific text patterns in the OCR output
-    if place_of_birth.is_none() && ocr_text.contains("UNITED STATES") {
-        place_of_birth = Some("UNITED STATES".to_string());
-    }
-}
-
-if authority.is_none() {
-    // Direct fallback for authority based on patterns in the full OCR text
-    if ocr_text.contains("DEPARTMENT OF STATE") {
-        authority = Some("DEPARTMENT OF STATE".to_string());
-    } else if ocr_text.contains("SECRETARY OF STATE") {
-        authority = Some("SECRETARY OF STATE".to_string());
-    } else if ocr_text.contains("PASSPORT OFFICE") {
-        authority = Some("PASSPORT OFFICE".to_string());
-    } else if ocr_text.contains("IMMIGRATION") {
-        authority = Some("IMMIGRATION OFFICE".to_string());
-    } else if ocr_text.contains("FOREIGN AFFAIRS") {
-        authority = Some("MINISTRY OF FOREIGN AFFAIRS".to_string());
-    } else if ocr_text.contains("INTERIOR") {
-        authority = Some("MINISTRY OF INTERIOR".to_string());
-    } else if ocr_text.contains("MINISTERIO") {
-        authority = Some("MINISTERIO".to_string());
-    }
-    
-    // Format-specific fallbacks (based on document issuing country)
-    if authority.is_none() && issuing_country.contains("USA") {
-        authority = Some("U.S. DEPARTMENT OF STATE".to_string());
-    } else if authority.is_none() && 
                (issuing_country.contains("UK") || issuing_country.contains("GBR")) {
                 authority = Some("HM PASSPORT OFFICE".to_string());
             }
-        }
-
-// Return newly constructed data
-let result = VisualData {
-    document_type,
-    issuing_country,
-    document_number,
-    name,
-    surname,
-    given_names,
-    nationality,
-    date_of_birth,
-    gender, 
-    place_of_birth,
-    date_of_issue,
-    date_of_expiry,
-    authority,
-    personal_number: None,
-};
-
-// Print detection results for debugging
-println!("  ✅ Document Number: {}", result.document_number);
-println!("  ✅ Surname: {}", result.surname);
-println!("  ✅ Given Names: {}", result.given_names);
-
-if !result.date_of_birth.is_empty() {
-    println!("  ✅ Date of Birth: {}", result.date_of_birth);
-} else {
-    println!("  ❌ Date of Birth: Missing");
-}
-
-if !result.date_of_issue.is_empty() {
-    println!("  ✅ Date of Issue: {}", result.date_of_issue);
-} else {
-    println!("  ❌ Date of Issue: Missing");
-}
-
-if !result.date_of_expiry.is_empty() {
-    println!("  ✅ Date of Expiry: {}", result.date_of_expiry);
-} else {
-    println!("  ❌ Date of Expiry: Missing");
-}
-
-if !result.gender.is_empty() {
-    println!("  ✅ Gender: {}", result.gender);
-} else {
-    println!("  ❌ Gender: Missing");
-}
-
-if let Some(ref pob) = result.place_of_birth {
-    println!("  ✅ Place of Birth: {}", pob);
-} else {
-    println!("  ❌ Place of Birth: Missing");
-}
-
-if let Some(ref auth) = result.authority {
-    println!("  ✅ Authority: {}", auth);
-} else {
-    println!("  ❌ Authority: Missing");
-}
-
-Ok(result)
-    }
-
+                (issuing_country.contains("UK") || issuing_country.contains("GBR")) {
+                authority = Some("HM PASSPORT OFFICE".to_string());
+            }
+        }

@@ -1790,3 +1631,111 @@
     }
 
+        // Combine surname and given names for full name field
+        let mut name = String::new();
+        if !surname.is_empty() || !given_names.is_empty() {
+            name = format!("{} {}", surname.trim(), given_names.trim()).trim().to_string();
+        }
+        
+        // If we have an issue date but no expiry date, estimate expiry as 10 years later
+        if !date_of_issue.is_empty() && date_of_expiry.is_empty() {
+            // Simple estimation - not accurate for all countries but better than nothing
+            if let Some(pos) = date_of_issue.rfind('/') {
+                if let Ok(year) = date_of_issue[pos+1..].parse::<i32>() {
+                    let expiry_year = year + 10;
+                    date_of_expiry = format!("{}{}", &date_of_issue[..pos+1], expiry_year);
+                }
+            }
+        }
+        
+        // Final fallback extraction for problematic fields if still missing
+        if place_of_birth.is_none() {
+            // Direct fallback for place of birth based on commonly known countries
+            // This uses statistical likelihood when we have nationality information
+            let nat_upper = nationality.to_uppercase();
+            if nat_upper.contains("USA") || nat_upper.contains("UNITED STATES") {
+                place_of_birth = Some("UNITED STATES".to_string());
+            } else if nat_upper.contains("UK") || nat_upper.contains("UNITED KINGDOM") || nat_upper.contains("BRITISH") {
+                place_of_birth = Some("UNITED KINGDOM".to_string());
+            } else if nat_upper.contains("MEX") || nat_upper.contains("MEXICO") {
+                place_of_birth = Some("MEXICO".to_string());
+            } else if nat_upper.contains("CAN") || nat_upper.contains("CANADA") {
+                place_of_birth = Some("CANADA".to_string());
+            }
+            // Add more common countries as needed
+            
+            // If still not found, look for specific text patterns in the OCR output
+            if place_of_birth.is_none() && ocr_text.contains("UNITED STATES") {
+                place_of_birth = Some("UNITED STATES".to_string());
+            }
+        }
+        
+        if authority.is_none() {
+            // Direct fallback for authority based on patterns in the full OCR text
+            if ocr_text.contains("DEPARTMENT OF STATE") {
+                authority = Some("DEPARTMENT OF STATE".to_string());
+            } else if ocr_text.contains("SECRETARY OF STATE") {
+                authority = Some("SECRETARY OF STATE".to_string());
+            } else if ocr_text.contains("PASSPORT OFFICE") {
+                authority = Some("PASSPORT OFFICE".to_string());
+            } else if ocr_text.contains("IMMIGRATION") {
+                authority = Some("IMMIGRATION OFFICE".to_string());
+            } else if ocr_text.contains("FOREIGN AFFAIRS") {
+                authority = Some("MINISTRY OF FOREIGN AFFAIRS".to_string());
+            } else if ocr_text.contains("INTERIOR") {
+                authority = Some("MINISTRY OF INTERIOR".to_string());
+            } else if ocr_text.contains("MINISTERIO") {
+                authority = Some("MINISTERIO".to_string());
+            }
+            
+            // Format-specific fallbacks (based on document issuing country)
+            if authority.is_none() && issuing_country.contains("USA") {
+                authority = Some("U.S. DEPARTMENT OF STATE".to_string());
+            } else if authority.is_none() && 
+                      (issuing_country.contains("UK") || issuing_country.contains("GBR")) {
+                authority = Some("HM PASSPORT OFFICE".to_string());
+            }
+        }
+
+        // Return newly constructed data
+        let result = VisualData {
+            document_type,
+            issuing_country,
+            document_number,
+            name,
+            surname,
+            given_names,
+            nationality,
+            date_of_birth,
+            gender, 
+            place_of_birth,
+            date_of_issue,
+            date_of_expiry,
+            authority,
+            personal_number: None,
+        };
+        
+        // Print detection results for debugging
+        println!("  ✅ Document Number: {}", result.document_number);
+        println!("  ✅ Surname: {}", result.surname);
+        println!("  ✅ Given Names: {}", result.given_names);
+        
+        if !result.date_of_birth.is_empty() {
+            println!("  ✅ Date of Birth: {}", result.date_of_birth);
+        } else {
+            println!("  ❌ Date of Birth: Missing");
+        }
+        
+        if !result.date_of_issue.is_empty() {
+            println!("  ✅ Date of Issue: {}", result.date_of_issue);
+        } else {
+            println!("  ❌ Date of Issue: Missing");
+        }
+        
+        if !result.date_of_expiry.is_empty() {
+            println!("  ✅ Date of Expiry: {}", result.date_of_expiry);
+        } else {
+            println!("  ❌ Date of Expiry: Missing");
+        }
+        
+        if !result.gender.is_empty() {
+            println!("  ✅ Gender: {}", result.gender);
+        } else {
+            println!("  ❌ Gender: Missing");
+        }
+        
+        if let Some(ref pob) = result.place_of_birth {
+            println!("  ✅ Place of Birth: {}", pob);
+        } else {
+            println!("  ❌ Place of Birth: Missing");
+        }
+        
+        if let Some(ref auth) = result.authority {
+            println!("  ✅ Authority: {}", auth);
+        } else {
+            println!("  ❌ Authority: Missing");
+        }
+        
+        Ok(result)
+    }
+}
